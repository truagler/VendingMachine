[{"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\index.js":"1","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\registerServiceWorker.js":"2","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\App.js":"3","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\Layout.js":"4","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\Home.tsx":"5","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\FetchData.tsx":"6","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Mapper\\Mapper.ts":"7","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\productBlank.ts":"8","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\ViewModel\\orderView.ts":"9","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\ViewModel\\coinView.ts":"10","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\coinBlank.ts":"11","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\orderBlank.ts":"12","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Enum\\ProductCategory.ts":"13","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Language\\Language.ts":"14","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Enum\\CoinCategory.ts":"15","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Modal\\ProductMachine.tsx":"16","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Modal\\adminModalProduct.tsx":"17"},{"size":521,"mtime":1653919955058,"results":"18","hashOfConfig":"19"},{"size":4121,"mtime":1653919955072,"results":"20","hashOfConfig":"19"},{"size":538,"mtime":1655474906714,"results":"21","hashOfConfig":"19"},{"size":314,"mtime":1654010457077,"results":"22","hashOfConfig":"19"},{"size":8851,"mtime":1655631119096,"results":"23","hashOfConfig":"19"},{"size":3251,"mtime":1655546636560,"results":"24","hashOfConfig":"19"},{"size":2263,"mtime":1655455835668,"results":"25","hashOfConfig":"19"},{"size":661,"mtime":1655455514541,"results":"26","hashOfConfig":"19"},{"size":282,"mtime":1654013122660,"results":"27","hashOfConfig":"19"},{"size":431,"mtime":1654012887063,"results":"28","hashOfConfig":"19"},{"size":432,"mtime":1654013615780,"results":"29","hashOfConfig":"19"},{"size":252,"mtime":1654012337536,"results":"30","hashOfConfig":"19"},{"size":67,"mtime":1654012462389,"results":"31","hashOfConfig":"19"},{"size":677,"mtime":1654013508577,"results":"32","hashOfConfig":"19"},{"size":72,"mtime":1654012055940,"results":"33","hashOfConfig":"19"},{"size":3498,"mtime":1655625288768,"results":"34","hashOfConfig":"19"},{"size":5264,"mtime":1655633890035,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"d4i0jv",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\index.js",[],["75","76","77"],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\registerServiceWorker.js",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\App.js",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\Layout.js",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\Home.tsx",["78","79"],"import * as React from 'react';\r\nimport {ChangeEvent, Component} from 'react';\r\nimport {Mapper} from \"../Mapper/Mapper\";\r\nimport {ProductCategory} from \"../Enum/ProductCategory\";\r\nimport {ProductView} from \"../ViewModel/productView\";\r\nimport {CoinView} from \"../ViewModel/coinView\";\r\nimport {OrderView} from \"../ViewModel/orderView\";\r\nimport {CoinCategory} from \"../Enum/CoinCategory\";\r\nimport {Language} from \"../Language/Language\";\r\nimport {AdminModalProduct} from \"../Modal/adminModalProduct\";\r\n\r\ntype Props = {}\r\n\r\ntype State = {\r\n\tproducts: ProductView[];\r\n\tproduct: ProductView;\r\n\tcoins: CoinView[];\r\n\tcoin: CoinView;\r\n\torders: OrderView[];\r\n\tids: number[];\r\n\tshowModalProduct: boolean;\r\n}\r\n\r\nexport class Home extends Component<Props, State> {\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tproducts: [],\r\n\t\t\tproduct: {\r\n\t\t\t\tid: 0,\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tcountProduct: 0,\r\n\t\t\t\tprice: 0,\r\n\t\t\t\tdescription: \"\",\r\n\t\t\t\tcategory: ProductCategory.food,\r\n\t\t\t\tisRemoved: false\r\n\t\t\t}, \r\n\t\t\tcoins:[],\r\n\t\t\tcoin: {\r\n\t\t\t\tid: 0,\r\n\t\t\t\tcoinCategory: CoinCategory.one,\r\n\t\t\t\tmaxCoinCount: 0,\r\n\t\t\t\tnowCoinCount: 0\r\n\t\t\t}, \r\n\t\t\torders:[],\r\n\t\t\tids: [],\r\n\t\t\tshowModalProduct: false\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.getProducts();\r\n\t\tthis.getCoins();\r\n\t\tthis.getOrderHistory();\r\n\t}\r\n\r\n\tasync getProducts(){\r\n\t\tconst response = await fetch('getproducts');\r\n\t\tconst request = await response.json();\r\n\t\tconst products = Mapper.mapToProductViews(request)\r\n\t\tthis.setState({products: products})\r\n\t}\r\n\t\r\n\tasync getProductsRemoved(){\r\n\t\tconst response = await fetch('getproductsremoved');\r\n\t\tconst request = await response.json();\r\n\t\tconst products = Mapper.mapToProductViews(request)\r\n\t\tthis.setState({products: products})\r\n\t}\r\n\r\n\tasync getProductsNotRemoved(){\r\n\t\tconst response = await fetch('getproductsnotremoved');\r\n\t\tconst request = await response.json();\r\n\t\tconst products = Mapper.mapToProductViews(request)\r\n\t\tthis.setState({products: products})\r\n\t}\r\n\r\n\tasync getProductByCategory(category: ProductCategory){\r\n\t\tconst response = await fetch('getproductscategory?category='+ category.toString());\r\n\t\tconst request = await response.json();\r\n\t\tconst products = Mapper.mapToProductViews(request)\r\n\t\tthis.setState({products: products})\r\n\t}\r\n\r\n\tasync getCoins(){\r\n\t\tconst response = await fetch('getcoins');\r\n\t\tconst request = await response.json();\r\n\t\tconst coins = Mapper.mapToCoinViews(request)\r\n\t\tthis.setState({coins: coins})\r\n\t}\r\n\r\n\tasync getOrderHistory(){\r\n\t\tconst response = await fetch('getorderhistory');\r\n\t\tconst request = await response.json();\r\n\t\tconst orders = Mapper.mapToOrderViews(request)\r\n\t\tthis.setState({orders: orders})\r\n\t}\r\n\r\n\tasync removeProduct(productId: number){\r\n\t\tawait fetch('removeproduct', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(productId)\r\n\t\t});\r\n\t\tawait this.getProducts();\r\n\t}\r\n\r\n\tasync updateProductCount(productId: number, e:ChangeEvent<HTMLInputElement>){\r\n\t\tlet count = Number(e.target.value);\r\n\t\tconst data = {productId, count}\r\n\t\t\r\n\t\tawait fetch('removeproduct', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(data)\r\n\t\t});\r\n\t\tawait this.getProducts();\r\n\t}\r\n\r\n\tasync removeProducts(productIds: number[]){\r\n\t\tif(this.state.ids.length == 0) return alert(\"Вы не выбрали ни одной операции\");\r\n\t\tawait fetch('removeproducts', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(productIds)\r\n\t\t});\r\n\t\tawait this.getProducts();\r\n\t}\r\n\r\n\tasync getProduct(id: number){\r\n\t\tconst response = await fetch('getproduct?id='+ id.toString());\r\n\t\tconst request = await response.json();\r\n\t\tconst product = Mapper.mapToProductView(request)\r\n\t\tthis.setState({product: product})\r\n\t\tthis.openProductModal();\r\n\t}\r\n\t\r\n\tupdateIds(e:ChangeEvent<HTMLInputElement>) {\r\n\t\tconst checked = e.target.checked;\r\n\t\tconst id = Number(e.target.value);\r\n\t\tif(!this.state.ids.includes(id) && checked){\r\n\t\t\tthis.state.ids.push(id);\r\n\t\t}\r\n\t\tif(this.state.ids.includes(id) && !checked){\r\n\t\t\tlet index = this.state.ids.indexOf(id);\r\n\t\t\tthis.state.ids.splice(index, 1)\r\n\t\t}\r\n\t}\r\n\r\n\tasync updateCoinCount(coinId: number, e:ChangeEvent<HTMLInputElement>){\r\n\t\tlet maxCoinCount = Number(e.target.value);\r\n\t\tconst data = {coinId, maxCoinCount}\r\n\t\t\r\n\t\tawait fetch('updatemaxcoin', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(data)\r\n\t\t});\r\n\t\tawait this.getCoins();\r\n\t}\r\n\t\r\n\tgetProductName(productId: number){\r\n\t\treturn this.state.products.find(product => product.id == productId)?.name;\r\n\t}\r\n\t\r\n\topenAddModel(){\r\n\t\tthis.setState({  showModalProduct: true, product: {id: 0, name: \"\", countProduct: 0, price: 0, category: ProductCategory.food, description: \"\", isRemoved: false}});\r\n\t}\r\n\t\r\n\topenProductModal = () =>{\r\n\t\tthis.setState({  showModalProduct: true });\r\n\t}\r\n\r\n\tcloseProductModal = () =>{\r\n\t\tthis.setState({  showModalProduct: false });\r\n\t}\r\n\t\r\n  render () {\r\n    return (\r\n      <div>\r\n          <h1>Панель администратора</h1>\r\n\t\t  <br/>\r\n\t\t  <h2>Продукты</h2>\r\n\t\t  <input onClick={() => this.getProducts()} type=\"radio\" id=\"contactChoice1\"\r\n\t\t\t\t name=\"product\"/>\r\n\t\t\t  <label htmlFor=\"contactChoice1\">Показать все</label>\r\n\t\t\t  <input onClick={() => this.getProductsRemoved()} type=\"radio\" id=\"contactChoice2\"\r\n\t\t\t\t\t name=\"product\" value=\"phone\"/>\r\n\t\t\t\t  <label htmlFor=\"contactChoice2\">Показать только удаленные</label>\r\n\t\t\t\t  <input onClick={() => this.getProductsNotRemoved()} type=\"radio\" id=\"contactChoice3\"\r\n\t\t\t\t\t\t name=\"product\" value=\"mail\"/>\r\n\t\t\t\t\t  <label htmlFor=\"contactChoice3\">Показать не удаленные</label>\r\n\t\t  <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n\t\t\t  <thead>\r\n\t\t\t  <tr>\r\n\t\t\t\t  <th>Наименование продукта</th>\r\n\t\t\t\t  <th>Количество продукта в машине</th>\r\n\t\t\t\t  <th>Стоимость продукта</th>\r\n\t\t\t\t  <th>Описание</th>\r\n\t\t\t\t  <th>Категория продукта</th>\r\n\t\t\t\t  <th><button onClick={() => this.removeProducts(this.state.ids)} className=\"btn btn-danger\">Удалить</button></th>\r\n\t\t\t\t  <th><button onClick={() => this.openAddModel()} className=\"btn btn-success\">Добавить новый продукт</button></th>\r\n\t\t\t\t  <th></th>\r\n\t\t\t\t  <th>Есть/Удален</th>\r\n\t\t\t  </tr>\r\n\t\t\t  </thead>\r\n\t\t\t  <tbody>\r\n\t\t\t  {this.state.products.map(product =>\r\n\t\t\t\t  <tr key={product.id}>\r\n\t\t\t\t\t  <td onClick={() => this.getProduct(product.id)}>{product.name}</td>\r\n\t\t\t\t\t  <td><input type=\"number\" min={0} max={100} step={1} value={product.countProduct} onChange={(e) => this.updateProductCount(product.id, e)}/></td>\r\n\t\t\t\t\t  <td>P{product.price}</td>\r\n\t\t\t\t\t  <td>{product.description}</td>\r\n\t\t\t\t\t  <td>{Language.toProductCategory(product.category)}</td>\r\n\t\t\t\t\t  <td><input onChange={(e) => this.updateIds(e)} value={product.id} type=\"checkbox\"/></td>\r\n\t\t\t\t\t  <td></td>\r\n\t\t\t\t\t  <td><button onClick={() => this.removeProduct(product.id)} className=\"btn btn-danger\">Удалить</button></td>\r\n\t\t\t\t\t  <td>{product.isRemoved ? \"Удален\" : \"Есть\"}</td>\r\n\t\t\t\t  </tr>\r\n\t\t\t  )}\r\n\t\t\t  </tbody>\r\n\t\t  </table>\r\n\t\t  <br/>\r\n\t\t  <h2>Монеты</h2>\r\n\t\t  <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n\t\t\t  <thead>\r\n\t\t\t  <tr>\r\n\t\t\t\t  <th>Ценность монеты</th>\r\n\t\t\t\t  <th>Максимальное количество монет</th>\r\n\t\t\t\t  <th>Количество монет на данный момент</th>\r\n\t\t\t  </tr>\r\n\t\t\t  </thead>\r\n\t\t\t  <tbody>\r\n\t\t\t  {this.state.coins.map(coin =>\r\n\t\t\t\t  <tr key={coin.id}>\r\n\t\t\t\t\t  <td>{Language.toCoinCategory(coin.coinCategory)}</td>\r\n\t\t\t\t\t  <td><input type=\"number\" min={0} max={100} step={1} value={coin.maxCoinCount} onChange={(e) => this.updateCoinCount(coin.id, e)}/></td>\r\n\t\t\t\t\t  <td>{coin.nowCoinCount}</td>\r\n\t\t\t\t  </tr>\r\n\t\t\t  )}\r\n\t\t\t  </tbody>\r\n\t\t  </table>\r\n\t\t  <br/>\r\n\t\t  <h2>История покупок</h2>\r\n\t\t  <table className='table table-striped' aria-labelledby=\"tabelLabel\">\r\n\t\t\t  <thead>\r\n\t\t\t  <tr>\r\n\t\t\t\t  <th>Дата покупки</th>\r\n\t\t\t\t  <th>Купленный товар/продукт/напиток</th>\r\n\t\t\t  </tr>\r\n\t\t\t  </thead>\r\n\t\t\t  <tbody>\r\n\t\t\t  {this.state.orders.map(order =>\r\n\t\t\t\t  <tr key={order.id}>\r\n\t\t\t\t\t  <td>{order.createdDateTime.toString().slice(0,10)}</td>\r\n\t\t\t\t\t  <td>{this.getProductName(order.productId)}</td>\r\n\t\t\t\t  </tr>\r\n\t\t\t  )}\r\n\t\t\t  </tbody>\r\n\t\t  </table>\r\n\t\t  <AdminModalProduct product={this.state.product} getProducts={() => this.getProducts()} isShown={this.state.showModalProduct} hide={() => this.closeProductModal()}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n",["80","81","82"],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\components\\FetchData.tsx",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Mapper\\Mapper.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\productBlank.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\ViewModel\\orderView.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\ViewModel\\coinView.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\coinBlank.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Blank\\orderBlank.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Enum\\ProductCategory.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Language\\Language.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Enum\\CoinCategory.ts",[],"C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Modal\\ProductMachine.tsx",["83","84","85","86","87","88","89"],"import React, {Component} from \"react\";\r\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {CoinView} from \"../ViewModel/coinView\";\r\nimport {ProductView} from \"../ViewModel/productView\";\r\nimport {Language} from \"../Language/Language\";\r\nimport {CoinCategory} from \"../Enum/CoinCategory\";\r\nimport {Mapper} from \"../Mapper/Mapper\";\r\n\r\n\r\nexport interface Props{\r\n\tisShown: boolean;\r\n\thide: () => void;\r\n\tcoins: CoinView[];\r\n\tproduct: ProductView;\r\n\tgetProducts: () => void;\r\n\tgetCoins: () => void;\r\n}\r\n\r\ntype State = {\r\n\tmoneyCount: number;\r\n}\r\n\r\nexport class ProductMachine extends Component<Props, State>{\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tmoneyCount: 0\r\n\t\t}\r\n\t}\r\n\r\n\tasync buyProduct(id: number){\r\n\t\t\r\n\t\tif(this.props.product.price < this.state.moneyCount){\r\n\t\t\treturn alert(\"У вас недостаточно средств!\")\r\n\t\t}\r\n\t\t\r\n\t\tawait fetch('buyproduct', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(id)\r\n\t\t});\r\n\t\tthis.setState({moneyCount: 0})\r\n\t\tthis.props.hide();\r\n\t\tawait this.props.getProducts();\r\n\t}\r\n\r\n\tasync minusCoinCount(id: number, nowCoinCount: number, maxCoinCount: number) {\r\n\t\t\r\n\t\tif(nowCoinCount >= maxCoinCount){\r\n\t\t\treturn alert(\"Допустимое количество монет, попробуйте другую монету\")\r\n\t\t}\r\n\t\t\r\n\t\tconst response = await fetch('getcoin?coinId=' + id.toString());\r\n\t\t\r\n\t\tconst request = Mapper.mapToCoinView(response);\r\n\t\t\r\n\t\tlet moneyNow = 0;\r\n\t\t\r\n\t\tif(request.coinCategory == CoinCategory.one){\r\n\t\t\tmoneyNow = 1;\r\n\t\t}\r\n\t\t\r\n\t\tif(request.coinCategory == CoinCategory.two){\r\n\t\t\tmoneyNow = 2;\r\n\t\t}\r\n\t\t\r\n\t\tif(request.coinCategory == CoinCategory.five){\r\n\t\t\tmoneyNow = 5;\r\n\t\t}\r\n\t\t\r\n\t\tif(request.coinCategory == CoinCategory.ten){\r\n\t\t\tmoneyNow = 10;\r\n\t\t}\r\n\t\t\r\n\t\tconst moneyCount = this.state.moneyCount + moneyNow;\r\n\t\t\t\r\n\t\tawait fetch('updatecoinnow?coinId=', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(id)\r\n\t\t});\r\n\t\t\r\n\t\tthis.setState({ moneyCount: moneyCount })\r\n\t\t\r\n\t\tawait this.props.getCoins();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Modal size=\"lg\"\r\n\t\t\t\t\t   aria-labelledby=\"contained-modal-title-vcenter\"\r\n\t\t\t\t\t   isOpen={this.props.isShown}\r\n\t\t\t\t\t   fade={false}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ModalHeader>\r\n\t\t\t\t\t\t<h1>Покупка {this.props.product.name}</h1>\r\n\t\t\t\t\t</ModalHeader>\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<p>Количество денег сейчас: {this.state.moneyCount}</p>\r\n\t\t\t\t\t\t<p>Стоимость: <b>P{this.props.product.price}</b></p>\r\n\t\t\t\t\t\t<p>Стоимость: P{this.props.product.description}</p>\r\n\t\t\t\t\t\t<div className=\"btn-group\" role=\"group\">\r\n\t\t\t\t\t\t\t{this.props.coins.map(coin =>\r\n\t\t\t\t\t\t\t\t<button onClick={() => this.minusCoinCount(coin.id, coin.nowCoinCount, coin.maxCoinCount)} value={coin.coinCategory == CoinCategory.one ? 1 : coin.coinCategory == CoinCategory.two ? 2 : coin.coinCategory == CoinCategory.five ? 5 : 10} type=\"button\" className=\"btn btn-secondary\">{Language.toCoinCategory(coin.coinCategory)}</button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<button onClick={() => this.buyProduct(this.props.product.id)} className=\"btn btn-success\">Купить продукт</button>\r\n\t\t\t\t\t\t<button onClick={() => this.props.hide()} className=\"btn btn-danger\">Выйти</button>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","C:\\Users\\vopro\\RiderProjects\\Machine\\Machine\\ClientApp\\src\\Modal\\adminModalProduct.tsx",["90","91","92","93","94","95"],"import React, {ChangeEvent, Component} from \"react\";\r\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {ProductView} from \"../ViewModel/productView\";\r\nimport {ProductCategory} from \"../Enum/ProductCategory\";\r\nimport {ProductBlank} from \"../Blank/productBlank\";\r\n\r\nexport interface Props{\r\n\tisShown: boolean;\r\n\thide: () => void;\r\n\tproduct: ProductView;\r\n\tgetProducts: () => void;\r\n}\r\n\r\ntype State = {\r\n\tname: string;\r\n\tcategory: ProductCategory;\r\n\tdescription: string;\r\n\tprice: number;\r\n\tcountProduct: number;\r\n}\r\n\r\nexport class AdminModalProduct extends Component<Props, State>{\r\n\tconstructor(props: Props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tname: \"\",\r\n\t\t\tcategory: ProductCategory.food,\r\n\t\t\tdescription: \"\",\r\n\t\t\tprice: 0,\r\n\t\t\tcountProduct: 0\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync addProduct(){\r\n\t\tif(this.state.countProduct <= 0 || this.state.price <= 0){\r\n\t\t\treturn alert(\"Количество продукта и цена указаны не верно\")\r\n\t\t}\r\n\t\t\r\n\t\tconst blank = new ProductBlank(0, this.state.name, this.state.countProduct, this.state.price, this.state.description, this.state.category, false)\r\n\t\t\r\n\t\tawait fetch('addproduct', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(blank)\r\n\t\t});\r\n\t\t\r\n\t\tthis.props.hide()\r\n\t\tthis.props.getProducts();\r\n\t}\r\n\t\r\n\tasync updateProduct(){\r\n\t\tif(this.state.countProduct <= 0 || this.state.price <= 0){\r\n\t\t\treturn alert(\"Количество продукта и цена указаны не верно\")\r\n\t\t}\r\n\t\t\r\n\t\tconst blank = new ProductBlank(0, this.state.name, this.state.countProduct, this.state.price, this.state.description, this.state.category, false)\r\n\t\t\r\n\t\tawait fetch('updateproduct', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(blank)\r\n\t\t});\r\n\t\t\r\n\t\tthis.props.hide()\r\n\t\tthis.props.getProducts();\r\n\t}\r\n\t\r\n\tupdateName(e:ChangeEvent<HTMLInputElement>){\r\n\t\tthis.setState({name: e.target.value.toString()})\r\n\t}\r\n\t\r\n\tupdateCount(e:ChangeEvent<HTMLInputElement>){\r\n\t\tthis.setState({price: Number(e.target.value)})\r\n\t}\r\n\t\r\n\tupdatePrice(e:ChangeEvent<HTMLInputElement>){\r\n\t\tthis.setState({countProduct: Number(e.target.value)})\r\n\t}\r\n\t\r\n\tupdateDescription(e:ChangeEvent<HTMLTextAreaElement>){\r\n\t\tthis.setState({description: e.target.value.toString()})\r\n\t}\r\n\t\r\n\tupdateCategory(e:ChangeEvent<HTMLSelectElement>){\r\n\t\tthis.setState({category: Number(e.target.value)   })\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Modal\r\n\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\taria-labelledby=\"contained-modal-title-vcenter\"\r\n\t\t\t\t\tisOpen={this.props.isShown}\r\n\t\t\t\t\tfade={false}\r\n\t\t\t\t>\r\n\t\t\t\t\t<ModalHeader>\r\n\t\t\t\t\t\t<h1>{this.props.product.id != 0 ? 'Редактирование продукта '+ this.props.product.name : 'Добавление нового продукта'}</h1>\r\n\t\t\t\t\t</ModalHeader>\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t<div className=\"input-group-prepend\">\r\n\t\t\t\t\t\t\t\t<span className=\"input-group-text\" id=\"basic-addon1\">Введите наименование продукта:</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<input onChange={(e) => this.updateName(e)} type=\"text\" className=\"form-control\" placeholder=\"Наименование продукта\" aria-label=\"Username\"\r\n\t\t\t\t\t\t\t\t   aria-describedby=\"basic-addon1\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"input-group mb-3\">\r\n\t\t\t\t\t\t\t<select onChange={(e) => this.updateCategory(e)} className=\"custom-select\" id=\"inputGroupSelect02\">\r\n\t\t\t\t\t\t\t\t<option selected>Выберите категорию</option>\r\n\t\t\t\t\t\t\t\t<option value=\"0\">Напитки</option>\r\n\t\t\t\t\t\t\t\t<option value=\"1\">Еда</option>\r\n\t\t\t\t\t\t\t\t<option value=\"2\">Сувениры</option>\r\n\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t\t<label className=\"input-group-text\" htmlFor=\"inputGroupSelect02\">Категория продукта</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"input-group\">\r\n\t\t\t\t\t\t\t<div className=\"input-group-prepend\">\r\n\t\t\t\t\t\t\t\t<span className=\"input-group-text\">Описание</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<textarea onChange={(e) => this.updateDescription(e)} className=\"form-control\" aria-label=\"With textarea\">{this.props.product.description}</textarea>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<span>Цена продукта: </span>\r\n\t\t\t\t\t\t\t<input onChange={(e) => this.updatePrice(e)} type=\"number\" min={0} max={100} step={1} defaultValue={this.props.product.id != 0 ? this.props.product.price : 0}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<span>Количество продукта: </span>\r\n\t\t\t\t\t\t\t<input onChange={(e) => this.updateCount(e)} type=\"number\" min={0} max={100} step={1} defaultValue={this.props.product.id != 0 ? this.props.product.countProduct : 0}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<button onClick={this.props.product.id != 0 ? () => this.updateProduct() : () => this.addProduct()} className={this.props.product.id != 0 ? 'btn btn-success' : 'btn btn-primary'}>{this.props.product.id != 0 ? 'Изменить' : 'Добавить'}</button>\r\n\t\t\t\t\t\t<button onClick={() => this.props.hide()} className={'btn btn-danger'}>Выйти</button>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":126,"column":28,"nodeType":"104","messageId":"105","endLine":126,"endColumn":30},{"ruleId":"102","severity":1,"message":"103","line":172,"column":57,"nodeType":"104","messageId":"105","endLine":172,"endColumn":59},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"106"},{"ruleId":"102","severity":1,"message":"103","line":62,"column":27,"nodeType":"104","messageId":"105","endLine":62,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":66,"column":27,"nodeType":"104","messageId":"105","endLine":66,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":70,"column":27,"nodeType":"104","messageId":"105","endLine":70,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":74,"column":27,"nodeType":"104","messageId":"105","endLine":74,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":110,"column":125,"nodeType":"104","messageId":"105","endLine":110,"endColumn":127},{"ruleId":"102","severity":1,"message":"103","line":110,"column":169,"nodeType":"104","messageId":"105","endLine":110,"endColumn":171},{"ruleId":"102","severity":1,"message":"103","line":110,"column":213,"nodeType":"104","messageId":"105","endLine":110,"endColumn":215},{"ruleId":"102","severity":1,"message":"107","line":103,"column":34,"nodeType":"104","messageId":"105","endLine":103,"endColumn":36},{"ruleId":"102","severity":1,"message":"107","line":132,"column":130,"nodeType":"104","messageId":"105","endLine":132,"endColumn":132},{"ruleId":"102","severity":1,"message":"107","line":136,"column":130,"nodeType":"104","messageId":"105","endLine":136,"endColumn":132},{"ruleId":"102","severity":1,"message":"107","line":140,"column":46,"nodeType":"104","messageId":"105","endLine":140,"endColumn":48},{"ruleId":"102","severity":1,"message":"107","line":140,"column":140,"nodeType":"104","messageId":"105","endLine":140,"endColumn":142},{"ruleId":"102","severity":1,"message":"107","line":140,"column":209,"nodeType":"104","messageId":"105","endLine":140,"endColumn":211},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"jsx-a11y/accessible-emoji",[],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",[],"Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]